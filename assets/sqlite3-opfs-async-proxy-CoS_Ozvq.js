(function(){"use strict";var j;const _=(h,...t)=>postMessage({type:h,payload:t}),K=function(){var M;const h=function(...e){throw new Error(e.join(" "))};globalThis.window===globalThis?h("This code cannot run from the main thread.","Load it as a Worker from a separate Worker."):(M=navigator==null?void 0:navigator.storage)!=null&&M.getDirectory||h("This API requires navigator.storage.getDirectory.");const t=Object.create(null);t.verbose=1;const G={0:console.error.bind(console),1:console.warn.bind(console),2:console.log.bind(console)},z=(e,...s)=>{t.verbose>e&&G[e]("OPFS asyncer:",...s)},S=(...e)=>z(2,...e),C=(...e)=>z(1,...e),T=(...e)=>z(0,...e),l=Object.create(null);l.reset=()=>{let e;const s=o=>o.count=o.time=o.wait=0;for(e in t.opIds)s(l[e]=Object.create(null));let n=l.s11n=Object.create(null);n=n.serialize=Object.create(null),n.count=n.time=0,n=l.s11n.deserialize=Object.create(null),n.count=n.time=0},l.dump=()=>{var i,a;let e,s=0,n=0,o=0;for(e in t.opIds){const c=l[e];s+=c.count,n+=c.time,o+=c.wait,c.avgTime=c.count&&c.time?c.time/c.count:0}console.log((i=globalThis==null?void 0:globalThis.location)==null?void 0:i.href,"metrics for",(a=globalThis==null?void 0:globalThis.location)==null?void 0:a.href,`:
`,l,`
Total of`,s,"op(s) for",n,"ms","approx",o,"ms spent waiting on OPFS APIs."),console.log("Serialization metrics:",l.s11n)};const b=Object.create(null),L=new Set,U=function(e,s){const n=new URL(e,"file://irrelevant").pathname;return s?n.split("/").filter(o=>!!o):n},P=async function(s,n=!1){const o=U(s,!0),i=o.pop();let a=t.rootDir;for(const c of o)c&&(a=await a.getDirectoryHandle(c,{create:!!n}));return[a,i]},N=async e=>{if(e.syncHandle){S("Closing sync handle for",e.filenameAbs);const s=e.syncHandle;return delete e.syncHandle,delete e.xLock,L.delete(e.fid),s.close()}},V=async e=>{try{await N(e)}catch(s){C("closeSyncHandleNoThrow() ignoring:",s,e)}},Y=async()=>{if(L.size)for(const e of L){const s=b[e];await V(s),S("Auto-unlocked",e,s.filenameAbs)}},F=async e=>{if(e.releaseImplicitLocks&&L.has(e.fid))return V(e)};class x extends Error{constructor(s,...n){super([...n,": "+s.name+":",s.message].join(" "),{cause:s}),this.name="GetSyncHandleError"}}x.convertRc=(e,s)=>e instanceof x&&(e.cause.name==="NoModificationAllowedError"||e.cause.name==="DOMException"&&e.cause.message.indexOf("Access Handles cannot")===0)?t.sq3Codes.SQLITE_BUSY:s;const k=async(e,s)=>{if(!e.syncHandle){const n=performance.now();S("Acquiring sync handle for",e.filenameAbs);const o=6,i=t.asyncIdleWaitTime*2;let a=1,c=i;for(;;c=i*++a)try{e.syncHandle=await e.fileHandle.createSyncAccessHandle();break}catch(r){if(a===o)throw new x(r,"Error getting sync handle for",s+"().",o,"attempts failed.",e.filenameAbs);C("Error getting sync handle for",s+"(). Waiting",c,"ms and trying again.",e.filenameAbs,r),Atomics.wait(t.sabOPView,t.opIds.retry,0,c)}S("Got",s+"() sync handle for",e.filenameAbs,"in",performance.now()-n,"ms"),e.xLock||(L.add(e.fid),S("Acquired implicit lock for",s+"()",e.fid,e.filenameAbs))}return e.syncHandle},d=(e,s)=>{S(e+"() => notify(",s,")"),Atomics.store(t.sabOPView,t.opIds.rc,s),Atomics.notify(t.sabOPView,t.opIds.rc)},W=function(e,s){s.readOnly&&h(e+"(): File is read-only: "+s.filenameAbs)},A=Object.create(null);A.op=void 0,A.start=void 0;const p=e=>{A.start=performance.now(),A.op=e,++l[e].count},u=()=>l[A.op].time+=performance.now()-A.start,R=Object.create(null);R.op=void 0,R.start=void 0;const w=e=>{R.start=performance.now(),R.op=e},y=()=>l[R.op].wait+=performance.now()-R.start;let H=!1;const D={"opfs-async-metrics":async()=>{p("opfs-async-metrics"),l.dump(),d("opfs-async-metrics",0),u()},"opfs-async-shutdown":async()=>{H=!0,d("opfs-async-shutdown",0)},mkdir:async e=>{p("mkdir");let s=0;w("mkdir");try{await P(e+"/filepart",!0)}catch(n){t.s11n.storeException(2,n),s=t.sq3Codes.SQLITE_IOERR}finally{y()}d("mkdir",s),u()},xAccess:async e=>{p("xAccess");let s=0;w("xAccess");try{const[n,o]=await P(e);await n.getFileHandle(o)}catch(n){t.s11n.storeException(2,n),s=t.sq3Codes.SQLITE_IOERR}finally{y()}d("xAccess",s),u()},xClose:async function(e){const s="xClose";p(s),L.delete(e);const n=b[e];let o=0;if(w(s),n){if(delete b[e],await N(n),n.deleteOnClose)try{await n.dirHandle.removeEntry(n.filenamePart)}catch(i){C("Ignoring dirHandle.removeEntry() failure of",n,i)}}else t.s11n.serialize(),o=t.sq3Codes.SQLITE_NOTFOUND;y(),d(s,o),u()},xDelete:async function(...e){p("xDelete");const s=await D.xDeleteNoWait(...e);d("xDelete",s),u()},xDeleteNoWait:async function(e,s=0,n=!1){let o=0;w("xDelete");try{for(;e;){const[i,a]=await P(e,!1);if(!a||(await i.removeEntry(a,{recursive:n}),s!==4660))break;n=!1,e=U(e,!0),e.pop(),e=e.join("/")}}catch(i){t.s11n.storeException(2,i),o=t.sq3Codes.SQLITE_IOERR_DELETE}return y(),o},xFileSize:async function(e){p("xFileSize");const s=b[e];let n=0;w("xFileSize");try{const o=await(await k(s,"xFileSize")).getSize();t.s11n.serialize(Number(o))}catch(o){t.s11n.storeException(1,o),n=x.convertRc(o,t.sq3Codes.SQLITE_IOERR)}await F(s),y(),d("xFileSize",n),u()},xLock:async function(e,s){p("xLock");const n=b[e];let o=0;const i=n.xLock;if(n.xLock=s,!n.syncHandle){w("xLock");try{await k(n,"xLock"),L.delete(e)}catch(a){t.s11n.storeException(1,a),o=x.convertRc(a,t.sq3Codes.SQLITE_IOERR_LOCK),n.xLock=i}y()}d("xLock",o),u()},xOpen:async function(e,s,n,o){const i="xOpen";p(i);const a=t.sq3Codes.SQLITE_OPEN_CREATE&n;w("xOpen");try{let c,r;try{[c,r]=await P(s,!!a)}catch(f){t.s11n.storeException(1,f),d(i,t.sq3Codes.SQLITE_NOTFOUND),u(),y();return}if(t.opfsFlags.OPFS_UNLINK_BEFORE_OPEN&o)try{await c.removeEntry(r)}catch{}const I=await c.getFileHandle(r,{create:a});y();const E=Object.assign(Object.create(null),{fid:e,filenameAbs:s,filenamePart:r,dirHandle:c,fileHandle:I,sabView:t.sabFileBufView,readOnly:a?!1:t.sq3Codes.SQLITE_OPEN_READONLY&n,deleteOnClose:!!(t.sq3Codes.SQLITE_OPEN_DELETEONCLOSE&n)});E.releaseImplicitLocks=o&t.opfsFlags.OPFS_UNLOCK_ASAP||t.opfsFlags.defaultUnlockAsap,b[e]=E,d(i,0)}catch(c){y(),T(i,c),t.s11n.storeException(1,c),d(i,t.sq3Codes.SQLITE_IOERR)}u()},xRead:async function(e,s,n){p("xRead");let o=0,i;const a=b[e];try{w("xRead"),i=(await k(a,"xRead")).read(a.sabView.subarray(0,s),{at:Number(n)}),y(),i<s&&(a.sabView.fill(0,i,s),o=t.sq3Codes.SQLITE_IOERR_SHORT_READ)}catch(c){i===void 0&&y(),T("xRead() failed",c,a),t.s11n.storeException(1,c),o=x.convertRc(c,t.sq3Codes.SQLITE_IOERR_READ)}await F(a),d("xRead",o),u()},xSync:async function(e,s){p("xSync");const n=b[e];let o=0;if(!n.readOnly&&n.syncHandle){try{w("xSync"),await n.syncHandle.flush()}catch(i){t.s11n.storeException(2,i),o=t.sq3Codes.SQLITE_IOERR_FSYNC}y()}d("xSync",o),u()},xTruncate:async function(e,s){p("xTruncate");let n=0;const o=b[e];w("xTruncate");try{W("xTruncate",o),await(await k(o,"xTruncate")).truncate(s)}catch(i){T("xTruncate():",i,o),t.s11n.storeException(2,i),n=x.convertRc(i,t.sq3Codes.SQLITE_IOERR_TRUNCATE)}await F(o),y(),d("xTruncate",n),u()},xUnlock:async function(e,s){p("xUnlock");let n=0;const o=b[e];if(t.sq3Codes.SQLITE_LOCK_NONE===s&&o.syncHandle){w("xUnlock");try{await N(o)}catch(i){t.s11n.storeException(1,i),n=t.sq3Codes.SQLITE_IOERR_UNLOCK}y()}d("xUnlock",n),u()},xWrite:async function(e,s,n){p("xWrite");let o;const i=b[e];w("xWrite");try{W("xWrite",i),o=s===(await k(i,"xWrite")).write(i.sabView.subarray(0,s),{at:Number(n)})?0:t.sq3Codes.SQLITE_IOERR_WRITE}catch(a){T("xWrite():",a,i),t.s11n.storeException(1,a),o=x.convertRc(a,t.sq3Codes.SQLITE_IOERR_WRITE)}await F(i),y(),d("xWrite",o),u()}},J=()=>{if(t.s11n)return t.s11n;const e=new TextDecoder,s=new TextEncoder("utf-8"),n=new Uint8Array(t.sabIO,t.sabS11nOffset,t.sabS11nSize),o=new DataView(t.sabIO,t.sabS11nOffset,t.sabS11nSize);t.s11n=Object.create(null);const i=Object.create(null);i.number={id:1,size:8,getter:"getFloat64",setter:"setFloat64"},i.bigint={id:2,size:8,getter:"getBigInt64",setter:"setBigInt64"},i.boolean={id:3,size:4,getter:"getInt32",setter:"setInt32"},i.string={id:4};const a=r=>i[typeof r]||h("Maintenance required: this value type cannot be serialized.",r),c=r=>{switch(r){case i.number.id:return i.number;case i.bigint.id:return i.bigint;case i.boolean.id:return i.boolean;case i.string.id:return i.string;default:h("Invalid type ID:",r)}};return t.s11n.deserialize=function(r=!1){++l.s11n.deserialize.count;const I=performance.now(),E=n[0],f=E?[]:null;if(E){const g=[];let m=1,O,v,q;for(O=0;O<E;++O,++m)g.push(c(n[m]));for(O=0;O<E;++O){const Q=g[O];Q.getter?(q=o[Q.getter](m,t.littleEndian),m+=Q.size):(v=o.getInt32(m,t.littleEndian),m+=4,q=e.decode(n.slice(m,m+v)),m+=v),f.push(q)}}return r&&(n[0]=0),l.s11n.deserialize.time+=performance.now()-I,f},t.s11n.serialize=function(...r){const I=performance.now();if(++l.s11n.serialize.count,r.length){const E=[];let f=0,g=1;for(n[0]=r.length&255;f<r.length;++f,++g)E.push(a(r[f])),n[g]=E[f].id;for(f=0;f<r.length;++f){const m=E[f];if(m.setter)o[m.setter](g,r[f],t.littleEndian),g+=m.size;else{const O=s.encode(r[f]);o.setInt32(g,O.byteLength,t.littleEndian),g+=4,n.set(O,g),g+=O.byteLength}}}else n[0]=0;l.s11n.serialize.time+=performance.now()-I},t.s11n.storeException=t.asyncS11nExceptions?(r,I)=>{r<=t.asyncS11nExceptions&&t.s11n.serialize([I.name,": ",I.message].join(""))}:()=>{},t.s11n},B=async function(){const s=Object.create(null);for(let n of Object.keys(t.opIds)){const o=D[n];if(!o)continue;const i=Object.create(null);s[t.opIds[n]]=i,i.key=n,i.f=o}for(;!H;)try{if(Atomics.wait(t.sabOPView,t.opIds.whichOp,0,t.asyncIdleWaitTime)!=="not-equal"){await Y();continue}const n=Atomics.load(t.sabOPView,t.opIds.whichOp);Atomics.store(t.sabOPView,t.opIds.whichOp,0);const o=s[n]??h("No waitLoop handler for whichOp #",n),i=t.s11n.deserialize(!0)||[];o.f?await o.f(...i):T("Missing callback for opId",n)}catch(n){T("in waitLoop():",n)}};navigator.storage.getDirectory().then(function(e){t.rootDir=e,globalThis.onmessage=function({data:s}){switch(s.type){case"opfs-async-init":{const n=s.args;for(const o in n)t[o]=n[o];t.verbose=n.verbose??1,t.sabOPView=new Int32Array(t.sabOP),t.sabFileBufView=new Uint8Array(t.sabIO,0,t.fileBufferSize),t.sabS11nView=new Uint8Array(t.sabIO,t.sabS11nOffset,t.sabS11nSize),Object.keys(D).forEach(o=>{Number.isFinite(t.opIds[o])||h("Maintenance required: missing state.opIds[",o,"]")}),J(),l.reset(),S("init state",t),_("opfs-async-inited"),B();break}case"opfs-async-restart":H&&(C("Restarting after opfs-async-shutdown. Might or might not work."),H=!1,B());break;case"opfs-async-metrics":l.dump();break}},_("opfs-async-loaded")}).catch(e=>T("error initializing OPFS asyncer:",e))};globalThis.SharedArrayBuffer?globalThis.Atomics?!globalThis.FileSystemHandle||!globalThis.FileSystemDirectoryHandle||!globalThis.FileSystemFileHandle||!globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle||!((j=navigator==null?void 0:navigator.storage)!=null&&j.getDirectory)?_("opfs-unavailable","Missing required OPFS APIs."):K():_("opfs-unavailable","Missing Atomics API.","The server must emit the COOP/COEP response headers to enable that."):_("opfs-unavailable","Missing SharedArrayBuffer API.","The server must emit the COOP/COEP response headers to enable that.")})();
